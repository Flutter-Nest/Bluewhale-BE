generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId      Int       @id @default(autoincrement()) @map("id")
  userName    String   
  email       String    
  password    String   
  phoneNumber String?
  school      String?
  birth       DateTime?
  grade       Int?      @default(0)
  className   String?   
  profileUrl  String?
  motto       String?
  role        String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime? 

  SchoolTests SchoolTests[]
  MockTests   MockTests[]
  Schedules   Schedules[]
  Interviews  Interviews[]
  asStudentConsultings   Consultings[] @relation("StudentConsulting")
  asConsultantConsultings  Consultings[] @relation("ConsultantConsulting")
  ConsultingComments  ConsultingComments[]
}

model SchoolTests {
  id           Int       @id @default(autoincrement()) @map("id")
  userId       Int
  subject      String    @db.VarChar(255)
  classHours   Int
  score        Int
  rank         Int
  totalStudent Int
  grade        Int
  testType     Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? 

  User Users @relation(fields: [userId], references: [userId])
}

model MockTests {
  id              Int    @id @default(autoincrement()) @map("id")
  userId          Int
  month           Int
  subject         Int
  originalScore   Int
  standardScore   Int
  percentage      Int
  rank            Int
  grade           Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime? 

  User Users @relation(fields: [userId], references: [userId])
}

model Schedules {
  id         Int       @id @default(autoincrement()) @map("id")
  userId     Int
  subject    String?
  content    String    @db.VarChar(255)
  startTime  Int
  endTime    Int
  completion Int       @default(0)
  date       DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime? 

  User    Users    @relation(fields: [userId], references: [userId])
}

model Subjects {
  subjectId    Int       @id @default(autoincrement()) @map("id")
  subjectName  String    @db.VarChar(255)
  subjectColor String    @db.VarChar(255)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? 

  Opus      Opus[]
}

model Interviews {
  interviewId  Int       @id @default(autoincrement()) @map("id")
  CACE         Int    
  PIPO         Int    
  RURD         Int
  DT           Int
  DP           Int
  AE           Int
  RF           Int
  userId       Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? 

  User    Users    @relation(fields: [userId], references: [userId])
}

model Opus {
  opusId       Int @id @default(autoincrement()) @map("id")
  subjectId    Int
  teacher      String
  title        String
  content      String
  grade        Int
  className    String
  date         DateTime
  time         Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime? 

  Subject Subjects @relation(fields: [subjectId], references: [subjectId])
} 

model Consultings {
  consultingId       Int       @id @default(autoincrement()) @map("id")
  content            String   
  startDate          DateTime
  endDate            DateTime
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime? 
  studentId          Int
  consultantId       Int
  
  Student            Users     @relation("StudentConsulting", fields: [studentId], references: [userId])
  Consultant         Users     @relation("ConsultantConsulting", fields: [consultantId], references: [userId])
  ConsultingComments ConsultingComments[]
}


model ConsultingComments {
  consultingCommentId   Int         @id @default(autoincrement()) @map("id")
  content               String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  deletedAt             DateTime? 

  consultingId          Int
  Consultings           Consultings @relation(fields: [consultingId], references: [consultingId])
  
  userId                Int
  Users                 Users @relation(fields: [userId], references: [userId])
}